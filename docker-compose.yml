services:
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - evolution_network
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: namastex
      RABBITMQ_DEFAULT_PASS: namastex8888
    ports:
      - "5672:5672"    
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - evolution_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
  evolution-api:
    image: evoapicloud/evolution-api:v2.3.0
    container_name: evolution_api
    restart: always
    ports:
      - "${SERVER_PORT}:8080"
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    volumes:
      - evolution_instances:/evolution/instances
    networks:
      - evolution_network
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: evolution_db
      POSTGRES_USER: evolution_user
      POSTGRES_PASSWORD: namastex8888
    volumes:
      - postgres_data:/var/lib/postgresql/data
    command: postgres -c max_connections=200
    networks:
      - evolution_network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U evolution_user -d evolution_db"]
      interval: 5s
      timeout: 5s
      retries: 5
volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  evolution_instances:
networks:
  evolution_network:
    driver: bridge
